import { gameboard, _placeShip, _createGrid } from "../js/gameboard.js";

const carrier = {
    id: 'carrier',
    length: 5,
    getDirection: () => direction,
    changeDirection: () => {
        return direction === 'horizontal' ? (direction = 'vertical') : (direction = 'horizontal');
    },
    hit: () => hits++,
    getHits: () => hits,
    isSunk: () => hits === length,
};

const carrierVertical = {
    id: 'carrier',
    length: 5,
    getDirection: () => direction,
    changeDirection: () => {
        return direction === 'horizontal' ? (direction = 'vertical') : (direction = 'horizontal');
    },
    hit: () => hits++,
    getHits: () => hits,
    isSunk: () => hits === length,
};

test.skip('create initial gameboard grid with 100 cells', () => {
    expect(_createGrid()).toMatchObject(
        [   
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false },
            { isHit: false }
        ]
    )
});

test.skip('place ship carrier with length 5 HORIZONTALLY in cell board[0]', () => {
    expect(JSON.stringify(_placeShip(0, 0, _createGrid(10))))
    .toEqual(JSON.stringify(
    [
        { isHit: false, ship: carrier },
        { isHit: false, ship: carrier },
        { isHit: false, ship: carrier },
        { isHit: false, ship: carrier },
        { isHit: false, ship: carrier },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false }
    ]));
});

test.skip('place ship carrier with length 5 VERTICALY in cell board[0]', () => {
    expect(JSON.stringify(_placeShip(0, 0, _createGrid())))
    .toEqual(JSON.stringify(
    [
        { isHit: false, ship: carrier },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false, ship: carrier },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false, ship: carrier },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false, ship: carrier },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false, ship: carrier },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false },
        { isHit: false }
    ]));
});

test.skip('throws ERROR on HORIZONTAL edge case', () => {
    expect( () => {
        _placeShip(56, 0, _createGrid());
    })
    .toThrow('Invalid horizontal placement.');
});

test.skip('throws ERROR on VERTICAL edge case', () => {
    expect( () => {
        _placeShip(69, 0, _createGrid());
    })
    .toThrow('Invalid vertical placement.');
});